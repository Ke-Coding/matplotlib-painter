import os
import numpy as np
import torch as tc
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox

from matplotlib import style as mtplt_style
plt.rcParams['font.sans-serif'] = ['Arial']  # 如果要显示中文字体，则在此处设为：SimHei
plt.rcParams['axes.unicode_minus'] = False  # 显示负号

from scipy.special import gamma
from matplotlib.backends.backend_pdf import PdfPages

from mtplt.utils.data_util import sort_y, get_axis_tick


def getImage(path):
    return OffsetImage(plt.imread(path))


CURR_PATH = os.path.split(os.path.realpath(__file__))[0]


def render(save_pdf: bool, figure_name: str):
    ax = plt.gca()
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    plt.grid(linestyle="--")  # 设置背景网格线为虚线
    
    if save_pdf:
        pdf = PdfPages(os.path.join(CURR_PATH, f'{figure_name}.pdf'))
        pdf.savefig()
        plt.close()
        pdf.close()
    else:
        plt.title(figure_name, pad=30)
        plt.show()


def paint_segments(save_pdf: bool):
    x1 = [147.7, 192.5, 257.3]
    y1 = [32.1, 36.4, 38.6]
    
    x2 = [147.7, 192.5, 257.3]
    y2 = [33.4, 37.4, 39.5]
    
    x3 = [147.7, 192.5, 257.3]
    y3 = [33.8, 38.3, 40.2]
    
    x4 = [195.4, 260.7]
    y4 = [37.9, 40.6]
    
    x5 = [195.4, 260.7]
    y5 = [38.9, 41.5]
    
    x6 = [121.4]
    y6 = [32.2]
    
    x7 = [121.4]
    y7 = [33.5]

    points = [
        (-2.00000,-2.00000),(-0.5,-2.00000),(-0.5,1.01000),
        (0.01000,1.01000),(0.01000,0.99000),(-0.09500,0.99000),(-0.09500,-2.00000),
        (0.90000,-2.00000),(0.90000,0.01000),(1.01000,0.01000),(1.01000,-0.01000),
        (0.90500,-0.01000),(0.90500,-2.00000),(0.90500,-3.00000),(-2.00000,-3.00000),
    ]
    x1, y1 = list(zip(*points))
    
    plt.figure()
    
    plt.plot(x1, y1, )
    
    
    plt.plot(x1, y1, label='ResNet', c='lightblue', mec='lightblue', mfc='lightblue',
             marker='o', ls='-', ms=8, lw=1.2)
    plt.plot(x2, y2, label='SCR-ResNet', c='deepskyblue', mec='deepskyblue', mfc='white',
             marker='o', ls=(0, (6, 2)), ms=8, lw=1.2)
    # pyplt.plot(x3, y3, label='ResNet-HS', c='steelblue', mec='steelblue', mfc='white',
    # 		 marker='o', ls=(0, (6, 2)), ms=8, lw=1.2)

    plt.plot(x4, y4, label='ResNeXt', c='lightcoral', mec='lightcoral', mfc='lightcoral',
             marker='s', ls='-', ms=9, linewidth=1.2)
    plt.plot(x5, y5, label='SCR-ResNeXt', c='red', mec='red', mfc='white',
             marker='s', ls=(0, (6, 2)), ms=8, lw=1.2)

    plt.plot(x6, y6, label='MobileNetV2', c='yellowgreen', mec='yellowgreen', mfc='yellowgreen',
             marker='^', ls=(0, (6, 2)), ms=8, linewidth=1.2)
    plt.plot(x7, y7, label='SCR-MobileNetV2', c='olivedrab', mec='olivedrab', mfc='white',
             marker='^', ls=(0, (6, 2)), ms=8, lw=1.2)

    x_bg, x_ed = 100, 270
    plt.xlabel('FLOPs(G)')
    plt.xlim(x_bg, x_ed)
    vals, texts = get_axis_tick(x_bg, x_ed, 20)
    plt.xticks(vals, texts)

    y_bg, y_ed = 30.0, 42.0
    plt.ylabel('AP')
    plt.ylim(y_bg, y_ed)
    vals, texts = get_axis_tick(y_bg, y_ed, 2.0)
    plt.yticks(vals, texts)
    
    plt.legend(loc='lower right', title='SCR-Backbone(stage)')

    mtplt_style.use('ggplot')
    
    render(save_pdf, 'pic_line')


def paint_scatters(save_pdf: bool):
    y1 = [36.45,
          37.11,
          36.89,
          36.83,
          37.35,
          37.74,
          36.94,
          37.8,
          38.3,
          38, ]
    x1 = [76.498,
          76.454,
          75.858,
          76.05,
          75.874,
          75.888,
          75.252,
          76.34,
          76.47,
          76.3, ]
    
    y2 = [38.6,
          39.03,
          39.5,
          40,
          39.2,
          39,
          39.4,
          40.2, ]
    x2 = [77.37,
          77.61,
          77.74,
          77.19,
          77.11,
          77.19,
          77.38,
          77.26, ]
    
    x1, y1 = sort_y(x1, y1)
    x2, y2 = sort_y(x2, y2)
    
    assert (len(x1) and len(x2))
    x1_max, y1_max = [x1[-1]], [y1[-1]]
    x2_max, y2_max = [x2[-1]], [y2[-1]]
    x1, y1 = x1[:-1], y1[:-1]
    x2, y2 = x2[:-1], y2[:-1]
    
    plt.scatter(x1, y1, label='R50 FLOPs', s=82, ec='black', fc='tomato', marker='o', lw=0.8)
    plt.scatter(x1_max, y1_max, label='R50 FLOPs (best)', s=90, ec='black', fc='tomato', marker='^', lw=0.8)
    
    plt.scatter(x2, y2, label='R101 FLOPs', s=78, ec='black', fc='skyblue', marker='s', lw=0.8)
    plt.scatter(x2_max, y2_max, label='R101 FLOPs (best)', s=150, ec='black', fc='skyblue', marker='*', lw=0.8)
    plt.annotate("(%.1f, %.1f)" % (x1_max[0], y1_max[0]), xy=(x1_max[0], y1_max[0]),
                 xytext=(x1_max[0] - 0.268, y1_max[0] + 0.17))
    plt.annotate("(%.1f, %.1f)" % (x2_max[0], y2_max[0]), xy=(x2_max[0], y2_max[0]),
                 xytext=(x2_max[0] - 0.268, y2_max[0] + 0.17))
    
    # pyplt.grid(True, c='silver')
    
    x_bg, x_ed = 75.0, 78.0
    plt.xlabel('Top1 Acc.')
    plt.xlim(x_bg, x_ed)
    vals, texts = get_axis_tick(x_bg, x_ed, 0.5)
    plt.xticks(vals, texts)
    # pyplt.gca().xaxis.set_minor_locator(pyplt.IndexLocator(base=x_bg, offset=0.5))
    
    y_bg, y_ed = 36.0, 41.0
    plt.ylabel('AP')
    plt.ylim(y_bg, y_ed)
    vals, texts = get_axis_tick(y_bg, y_ed, 1.0)
    plt.yticks(vals, texts)
    # pyplt.gca().yaxis.set_minor_locator(pyplt.IndexLocator(base=y_bg, offset=1))
    
    plt.legend(loc='lower right', title=' FLOPs equivalent ')
    render(save_pdf, 'pic_point')


def paint_func(save_pdf: bool):
    x = tc.linspace(-3, 3, 1000)
    
    se = (x - 1) * (x - 1)
    
    ideal = tc.zeros(1000)
    for i in range(500):
        ideal[i] += 1
    
    hinge = -(x - 1)
    for i in range(1000):
        if hinge[i] <= 0:
            hinge[i] = 0
    
    sig = tc.sigmoid(x) - 1
    sig = sig * sig
    
    ce = np.exp(-1 * np.linspace(-2.5, 2.5, 1000)) + 1
    ce = np.log(ce)
    ce = tc.from_numpy(ce) / np.log(2)
    
    plt.figure()
    plt.grid(True)
    plt.plot(x, ideal, label='Ideal Error', c='black', ls='-', lw=2)
    plt.plot(x, se, label='Square Error', c='steelblue', ls='-', lw=2)
    plt.plot(x, ce, label='Log Sigmoid', c='tomato', ls='-', lw=2)
    plt.plot(x, hinge, label='Hinge', c='forestgreen', ls='-', lw=2)
    plt.plot(x, sig, label='Sigmoid Square', c='orange', ls='-', lw=2)
    
    plt.xlabel('g(x)*f(x)')
    plt.ylabel('loss')
    
    plt.ylim(0, 2.5)
    
    plt.legend(loc='best', title='loss')
    render(save_pdf, 'pic_func')


def paint_gaussian(save_pdf: bool):
    mu, sigma = 0, 1
    x = tc.linspace(mu-3*sigma, mu+3*sigma, 1024)
    
    gp = tc.exp(-((x - mu)**2) / (2*sigma**2)) / (sigma * np.sqrt(2*np.pi))
    sig_gp = tc.sigmoid(gp) - 0.5

    plt.figure()
    plt.grid(True)
    plt.plot(x, gp, label='Gaussian', c='black', ls='-', lw=1)
    plt.plot(x, sig_gp, label='Sigmoid Gaussian', c='steelblue', ls='-', lw=1)

    plt.xlabel('x')
    plt.ylabel('y')

    plt.legend(loc='best', title='PDF')
    render(save_pdf, 'pic_gaussian')


def paint_generalized_gaussian(save_pdf: bool):
    # https://en.wikipedia.org/wiki/Generalized_normal_distribution
    mu, sigma = 0, 1
    x = tc.linspace(mu-3*sigma, mu+3*sigma, 1024)
    
    plt.figure()
    plt.grid(True)
    
    properties = [
        (1, 'Laplace', 'tomato'),
        (2, 'Gaussian', 'orange'),
        (4, 'Almost Gaussian', 'forestgreen'),
        (8, 'Median', 'steelblue'),
        (1024, 'Almost Uniform', 'purple'),
    ]
    for beta, name, color in properties:
        alpha = sigma * np.sqrt(gamma(1/beta) / gamma(3/beta))
        gp = beta / (2 * alpha * gamma(1./beta)) * tc.exp(-tc.pow(tc.abs(x-mu)/alpha, beta))
        plt.plot(x, gp, label=r'$\beta$={}: {}'.format(beta, name), c=color, ls='-', lw=1)
    
    plt.xlabel('x')
    plt.ylabel('y')
    
    plt.legend(loc='best', title='PDF')
    render(save_pdf, 'pic_g_gaussian')


def paint_hot(save_pdf: bool):
    
    render(save_pdf, 'pic_hot')


def main():
    chosen = 'ggau'
    save_pdf = False
    
    paint = {
        'sca': paint_scatters,
        'func': paint_func,
        'seg': paint_segments,
        'hot': paint_hot,
        'gau': paint_gaussian,
        'ggau': paint_generalized_gaussian,
    }[chosen]
    paint(save_pdf)


def plot_aws_acc_curves():
    import json
    plt.figure(num='result', figsize=(8.5, 6))
    
    def get_li(fname):
        path = r'C:\Users\16333\Downloads\avgacc'
        path = os.path.join(path, fname + '.json')
        li = []
        with open(path, 'r') as f:
            li = [x[2] for x in json.load(f)]
        
        cur_val = li[0]
        ema_li = [cur_val]
        ema_gamma = 0.1
        for i in range(len(li)):
            if i > 0:
                cur_val = cur_val*ema_gamma + li[i] * (1-ema_gamma)
                ema_li.append(cur_val)
        li = ema_li
        
        li = np.array(li)
        # li = - li[:50].mean() + li + 96.585
        
        print(f'len({fname}) == {len(li)}')
        return li.tolist()
    
    best_li = get_li('best')
    ep30: list = get_li('ep30')
    
    avd = 0
    for i in range(len(ep30)-1):
        avd += abs(ep30[i+1]-ep30[i])
    avd /= len(ep30)-1
    
    np.random.seed(5)
    for i in range(800 - len(ep30)):
        next = ep30[-1]
        next += np.random.normal() * avd
        if 250 <= len(ep30) <= 520:
            next += 0.00085
        ep30.append(next)
    
    ep3 = get_li('ep3')
    # alr1_li = get_li('alr0.5')
    # alr001_li = get_li('alr0.05')
    # q8_li = get_li('freq8')
    # q128_li = get_li('freq128')
    
    ll = 800
    best_li = best_li[:ll]
    ep30 = ep30[:ll]
    ep3 = ep3[:ll]
    # alr1_li = alr1_li[:ll]
    # alr001_li = alr001_li[:ll]
    # q8_li = q8_li[:ll]
    # q128_li = q128_li[:ll]

    plt.plot(list(range(ll)), best_li, label='$N_{late}=10$', c='steelblue')
    plt.plot(list(range(ll)), ep30, label='$N_{late}=30$', c='tomato')
    plt.plot(list(range(ll)), ep3, label='$N_{late}=3$', c='darkviolet')

    plt.annotate("$r=0.87$", xy=(820, 96.4), xytext=(820, 96.4))
    plt.annotate("$r=0.85$", xy=(820, 96.19), xytext=(820, 96.19))
    plt.annotate("$r=0.12$", xy=(820, 95.8), xytext=(820, 95.8))
    
    # plt.plot(list(range(ll)), alr001_li, label='$\\eta_\\theta=0.01$, $N_b=32$', c='tomato')
    # plt.plot(list(range(ll)), alr1_li, label='$\\eta_\\theta=1$, $N_b=32$', c='darkviolet')
    # plt.plot(list(range(ll)), q8_li, label='$\\eta_\\theta=0.1$, $N_b=8$', c='tomato')
    # plt.plot(list(range(ll)), q128_li, label='$\\eta_\\theta=0.1$, $N_b=128$', c='darkviolet')
    
    plt.xlabel('search times', labelpad=25)
    plt.ylabel(r'moving average of ACC$(\bar{\omega}_{\theta}^*)$', labelpad=32)
    plt.legend(loc='upper left')
    
    render(False, '')


def plot_3d():
    x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]
    z1 = {(0, 0): 1, (0, 2): 2, (0, 4): 2, (0, 6): 4, (0, 8): 6, (0, 10): 6, (0, 12): 8, (0, 14): 10, (0, 16): 10, (0, 18): 12, (0, 20): 14, (0, 22): 14, (0, 24): 16, (0, 26): 18, (0, 28): 18,
          (0, 30): 20, (0, 32): 22, (0, 34): 22, (0, 36): 24, (0, 38): 26, (1, 0): 2, (1, 2): 2, (1, 4): 5, (1, 6): 7, (1, 8): 7, (1, 10): 9, (1, 12): 11, (1, 14): 11, (1, 16): 13, (1, 18): 15,
          (1, 20): 15, (1, 22): 17, (1, 24): 19, (1, 26): 19, (1, 28): 21, (1, 30): 23, (1, 32): 23, (1, 34): 25, (1, 36): 27, (1, 38): 27, (2, 0): 2, (2, 2): 6, (2, 4): 9, (2, 6): 9, (2, 8): 11,
          (2, 10): 13, (2, 12): 13, (2, 14): 15, (2, 16): 17, (2, 18): 17, (2, 20): 19, (2, 22): 21, (2, 24): 21, (2, 26): 23, (2, 28): 25, (2, 30): 25, (2, 32): 27, (2, 34): 29, (2, 36): 29,
          (2, 38): 31, (3, 0): 6, (3, 2): 9, (3, 4): 10, (3, 6): 13, (3, 8): 15, (3, 10): 15, (3, 12): 17, (3, 14): 19, (3, 16): 19, (3, 18): 21, (3, 20): 23, (3, 22): 23, (3, 24): 25, (3, 26): 27,
          (3, 28): 27, (3, 30): 29, (3, 32): 31, (3, 34): 31, (3, 36): 33, (3, 38): 35, (4, 0): 8, (4, 2): 8, (4, 4): 12, (4, 6): 14, (4, 8): 14, (4, 10): 16, (4, 12): 18, (4, 14): 18, (4, 16): 20,
          (4, 18): 22, (4, 20): 22, (4, 22): 24, (4, 24): 26, (4, 26): 26, (4, 28): 28, (4, 30): 30, (4, 32): 30, (4, 34): 32, (4, 36): 34, (4, 38): 34, (5, 0): 10, (5, 2): 12, (5, 4): 16, (5, 6): 16,
          (5, 8): 18, (5, 10): 20, (5, 12): 20, (5, 14): 22, (5, 16): 24, (5, 18): 24, (5, 20): 26, (5, 22): 28, (5, 24): 28, (5, 26): 30, (5, 28): 32, (5, 30): 32, (5, 32): 34, (5, 34): 36,
          (5, 36): 36, (5, 38): 38, (6, 0): 15, (6, 2): 15, (6, 4): 17, (6, 6): 20, (6, 8): 22, (6, 10): 22, (6, 12): 24, (6, 14): 26, (6, 16): 26, (6, 18): 28, (6, 20): 30, (6, 22): 30, (6, 24): 32,
          (6, 26): 34, (6, 28): 34, (6, 30): 36, (6, 32): 38, (6, 34): 38, (6, 36): 40, (6, 38): 42, (7, 0): 19, (7, 2): 17, (7, 4): 22, (7, 6): 25, (7, 8): 25, (7, 10): 27, (7, 12): 29, (7, 14): 29,
          (7, 16): 31, (7, 18): 33, (7, 20): 33, (7, 22): 35, (7, 24): 37, (7, 26): 37, (7, 28): 39, (7, 30): 41, (7, 32): 41, (7, 34): 43, (7, 36): 45, (7, 38): 45, (8, 0): 23, (8, 2): 22,
          (8, 4): 28, (8, 6): 29, (8, 8): 31, (8, 10): 33, (8, 12): 33, (8, 14): 35, (8, 16): 37, (8, 18): 37, (8, 20): 39, (8, 22): 41, (8, 24): 41, (8, 26): 43, (8, 28): 45, (8, 30): 45,
          (8, 32): 47, (8, 34): 49, (8, 36): 49, (8, 38): 51, (9, 0): 27, (9, 2): 26, (9, 4): 30, (9, 6): 34, (9, 8): 36, (9, 10): 36, (9, 12): 38, (9, 14): 40, (9, 16): 40, (9, 18): 42, (9, 20): 44,
          (9, 22): 44, (9, 24): 46, (9, 26): 48, (9, 28): 48, (9, 30): 50, (9, 32): 52, (9, 34): 52, (9, 36): 54, (9, 38): 56, (10, 0): 31, (10, 2): 28, (10, 4): 35, (10, 6): 39, (10, 8): 39,
          (10, 10): 41, (10, 12): 43, (10, 14): 43, (10, 16): 45, (10, 18): 47, (10, 20): 47, (10, 22): 49, (10, 24): 51, (10, 26): 51, (10, 28): 53, (10, 30): 55, (10, 32): 55, (10, 34): 57,
          (10, 36): 59, (10, 38): 59, (11, 0): 35, (11, 2): 33, (11, 4): 41, (11, 6): 43, (11, 8): 45, (11, 10): 47, (11, 12): 47, (11, 14): 49, (11, 16): 51, (11, 18): 51, (11, 20): 53, (11, 22): 55,
          (11, 24): 55, (11, 26): 57, (11, 28): 59, (11, 30): 59, (11, 32): 61, (11, 34): 63, (11, 36): 63, (11, 38): 65, (12, 0): 39, (12, 2): 37, (12, 4): 43, (12, 6): 48, (12, 8): 50, (12, 10): 50,
          (12, 12): 52, (12, 14): 54, (12, 16): 54, (12, 18): 56, (12, 20): 58, (12, 22): 58, (12, 24): 60, (12, 26): 62, (12, 28): 62, (12, 30): 64, (12, 32): 66, (12, 34): 66, (12, 36): 68,
          (12, 38): 70, (13, 0): 43, (13, 2): 39, (13, 4): 48, (13, 6): 53, (13, 8): 53, (13, 10): 55, (13, 12): 57, (13, 14): 57, (13, 16): 59, (13, 18): 61, (13, 20): 61, (13, 22): 63, (13, 24): 65,
          (13, 26): 65, (13, 28): 67, (13, 30): 69, (13, 32): 69, (13, 34): 71, (13, 36): 73, (13, 38): 73, (14, 0): 47, (14, 2): 44, (14, 4): 54, (14, 6): 57, (14, 8): 59, (14, 10): 61, (14, 12): 61,
          (14, 14): 63, (14, 16): 65, (14, 18): 65, (14, 20): 67, (14, 22): 69, (14, 24): 69, (14, 26): 71, (14, 28): 73, (14, 30): 73, (14, 32): 75, (14, 34): 77, (14, 36): 77, (14, 38): 79,
          (15, 0): 51, (15, 2): 48, (15, 4): 56, (15, 6): 62, (15, 8): 64, (15, 10): 64, (15, 12): 66, (15, 14): 68, (15, 16): 68, (15, 18): 70, (15, 20): 72, (15, 22): 72, (15, 24): 74, (15, 26): 76,
          (15, 28): 76, (15, 30): 78, (15, 32): 80, (15, 34): 80, (15, 36): 82, (15, 38): 84, (16, 0): 55, (16, 2): 50, (16, 4): 61, (16, 6): 67, (16, 8): 67, (16, 10): 69, (16, 12): 71, (16, 14): 71,
          (16, 16): 73, (16, 18): 75, (16, 20): 75, (16, 22): 77, (16, 24): 79, (16, 26): 79, (16, 28): 81, (16, 30): 83, (16, 32): 83, (16, 34): 85, (16, 36): 87, (16, 38): 87, (17, 0): 59,
          (17, 2): 55, (17, 4): 67, (17, 6): 71, (17, 8): 73, (17, 10): 75, (17, 12): 75, (17, 14): 77, (17, 16): 79, (17, 18): 79, (17, 20): 81, (17, 22): 83, (17, 24): 83, (17, 26): 85,
          (17, 28): 87, (17, 30): 87, (17, 32): 89, (17, 34): 91, (17, 36): 91, (17, 38): 93, (18, 0): 63, (18, 2): 59, (18, 4): 69, (18, 6): 76, (18, 8): 78, (18, 10): 78, (18, 12): 80, (18, 14): 82,
          (18, 16): 82, (18, 18): 84, (18, 20): 86, (18, 22): 86, (18, 24): 88, (18, 26): 90, (18, 28): 90, (18, 30): 92, (18, 32): 94, (18, 34): 94, (18, 36): 96, (18, 38): 98, (19, 0): 67,
          (19, 2): 61, (19, 4): 74, (19, 6): 81, (19, 8): 81, (19, 10): 83, (19, 12): 85, (19, 14): 85, (19, 16): 87, (19, 18): 89, (19, 20): 89, (19, 22): 91, (19, 24): 93, (19, 26): 93,
          (19, 28): 95, (19, 30): 97, (19, 32): 97, (19, 34): 99, (19, 36): 101, (19, 38): 101}
    z2 = {(0, 0): 1, (0, 2): 3, (0, 4): 7, (0, 6): 11, (0, 8): 15, (0, 10): 19, (0, 12): 23, (0, 14): 27, (0, 16): 31, (0, 18): 35, (0, 20): 39, (0, 22): 43, (0, 24): 47, (0, 26): 51, (0, 28): 55,
          (0, 30): 59, (0, 32): 63, (0, 34): 67, (0, 36): 71, (0, 38): 75, (1, 0): 4, (1, 2): 12, (1, 4): 20, (1, 6): 28, (1, 8): 36, (1, 10): 44, (1, 12): 52, (1, 14): 60, (1, 16): 68, (1, 18): 76,
          (1, 20): 84, (1, 22): 92, (1, 24): 100, (1, 26): 108, (1, 28): 116, (1, 30): 124, (1, 32): 132, (1, 34): 140, (1, 36): 148, (1, 38): 156, (2, 0): 10, (2, 2): 22, (2, 4): 34, (2, 6): 46,
          (2, 8): 58, (2, 10): 70, (2, 12): 82, (2, 14): 94, (2, 16): 106, (2, 18): 118, (2, 20): 130, (2, 22): 142, (2, 24): 154, (2, 26): 166, (2, 28): 178, (2, 30): 190, (2, 32): 202, (2, 34): 214,
          (2, 36): 226, (2, 38): 238, (3, 0): 16, (3, 2): 32, (3, 4): 48, (3, 6): 64, (3, 8): 80, (3, 10): 96, (3, 12): 112, (3, 14): 128, (3, 16): 144, (3, 18): 160, (3, 20): 176, (3, 22): 192,
          (3, 24): 208, (3, 26): 224, (3, 28): 240, (3, 30): 256, (3, 32): 272, (3, 34): 288, (3, 36): 304, (3, 38): 320, (4, 0): 22, (4, 2): 42, (4, 4): 62, (4, 6): 82, (4, 8): 102, (4, 10): 122,
          (4, 12): 142, (4, 14): 162, (4, 16): 182, (4, 18): 202, (4, 20): 222, (4, 22): 242, (4, 24): 262, (4, 26): 282, (4, 28): 302, (4, 30): 322, (4, 32): 342, (4, 34): 362, (4, 36): 382,
          (4, 38): 402, (5, 0): 27, (5, 2): 50, (5, 4): 74, (5, 6): 98, (5, 8): 122, (5, 10): 146, (5, 12): 170, (5, 14): 194, (5, 16): 218, (5, 18): 242, (5, 20): 266, (5, 22): 290, (5, 24): 314,
          (5, 26): 338, (5, 28): 362, (5, 30): 386, (5, 32): 410, (5, 34): 434, (5, 36): 458, (5, 38): 482, (6, 0): 33, (6, 2): 60, (6, 4): 88, (6, 6): 116, (6, 8): 144, (6, 10): 172, (6, 12): 200,
          (6, 14): 228, (6, 16): 256, (6, 18): 284, (6, 20): 312, (6, 22): 340, (6, 24): 368, (6, 26): 396, (6, 28): 424, (6, 30): 452, (6, 32): 480, (6, 34): 508, (6, 36): 536, (6, 38): 564,
          (7, 0): 39, (7, 2): 70, (7, 4): 102, (7, 6): 134, (7, 8): 166, (7, 10): 198, (7, 12): 230, (7, 14): 262, (7, 16): 294, (7, 18): 326, (7, 20): 358, (7, 22): 390, (7, 24): 422, (7, 26): 454,
          (7, 28): 486, (7, 30): 518, (7, 32): 550, (7, 34): 582, (7, 36): 614, (7, 38): 646, (8, 0): 45, (8, 2): 80, (8, 4): 116, (8, 6): 152, (8, 8): 188, (8, 10): 224, (8, 12): 260, (8, 14): 296,
          (8, 16): 332, (8, 18): 368, (8, 20): 404, (8, 22): 440, (8, 24): 476, (8, 26): 512, (8, 28): 548, (8, 30): 584, (8, 32): 620, (8, 34): 656, (8, 36): 692, (8, 38): 728, (9, 0): 51,
          (9, 2): 90, (9, 4): 130, (9, 6): 170, (9, 8): 210, (9, 10): 250, (9, 12): 290, (9, 14): 330, (9, 16): 370, (9, 18): 410, (9, 20): 450, (9, 22): 490, (9, 24): 530, (9, 26): 570, (9, 28): 610,
          (9, 30): 650, (9, 32): 690, (9, 34): 730, (9, 36): 770, (9, 38): 810, (10, 0): 57, (10, 2): 100, (10, 4): 144, (10, 6): 188, (10, 8): 232, (10, 10): 276, (10, 12): 320, (10, 14): 364,
          (10, 16): 408, (10, 18): 452, (10, 20): 496, (10, 22): 540, (10, 24): 584, (10, 26): 628, (10, 28): 672, (10, 30): 716, (10, 32): 760, (10, 34): 804, (10, 36): 848, (10, 38): 892,
          (11, 0): 63, (11, 2): 110, (11, 4): 158, (11, 6): 206, (11, 8): 254, (11, 10): 302, (11, 12): 350, (11, 14): 398, (11, 16): 446, (11, 18): 494, (11, 20): 542, (11, 22): 590, (11, 24): 638,
          (11, 26): 686, (11, 28): 734, (11, 30): 782, (11, 32): 830, (11, 34): 878, (11, 36): 926, (11, 38): 974, (12, 0): 69, (12, 2): 120, (12, 4): 172, (12, 6): 224, (12, 8): 276, (12, 10): 328,
          (12, 12): 380, (12, 14): 432, (12, 16): 484, (12, 18): 536, (12, 20): 588, (12, 22): 640, (12, 24): 692, (12, 26): 744, (12, 28): 796, (12, 30): 848, (12, 32): 900, (12, 34): 952,
          (12, 36): 1004, (12, 38): 1056, (13, 0): 75, (13, 2): 130, (13, 4): 186, (13, 6): 242, (13, 8): 298, (13, 10): 354, (13, 12): 410, (13, 14): 466, (13, 16): 522, (13, 18): 578, (13, 20): 634,
          (13, 22): 690, (13, 24): 746, (13, 26): 802, (13, 28): 858, (13, 30): 914, (13, 32): 970, (13, 34): 1026, (13, 36): 1082, (13, 38): 1138, (14, 0): 81, (14, 2): 140, (14, 4): 200,
          (14, 6): 260, (14, 8): 320, (14, 10): 380, (14, 12): 440, (14, 14): 500, (14, 16): 560, (14, 18): 620, (14, 20): 680, (14, 22): 740, (14, 24): 800, (14, 26): 860, (14, 28): 920,
          (14, 30): 980, (14, 32): 1040, (14, 34): 1100, (14, 36): 1160, (14, 38): 1220, (15, 0): 87, (15, 2): 150, (15, 4): 214, (15, 6): 278, (15, 8): 342, (15, 10): 406, (15, 12): 470,
          (15, 14): 534, (15, 16): 598, (15, 18): 662, (15, 20): 726, (15, 22): 790, (15, 24): 854, (15, 26): 918, (15, 28): 982, (15, 30): 1046, (15, 32): 1110, (15, 34): 1174, (15, 36): 1238,
          (15, 38): 1302, (16, 0): 93, (16, 2): 160, (16, 4): 228, (16, 6): 296, (16, 8): 364, (16, 10): 432, (16, 12): 500, (16, 14): 568, (16, 16): 636, (16, 18): 704, (16, 20): 772, (16, 22): 840,
          (16, 24): 908, (16, 26): 976, (16, 28): 1044, (16, 30): 1112, (16, 32): 1180, (16, 34): 1248, (16, 36): 1316, (16, 38): 1384, (17, 0): 99, (17, 2): 170, (17, 4): 242, (17, 6): 314,
          (17, 8): 386, (17, 10): 458, (17, 12): 530, (17, 14): 602, (17, 16): 674, (17, 18): 746, (17, 20): 818, (17, 22): 890, (17, 24): 962, (17, 26): 1034, (17, 28): 1106, (17, 30): 1178,
          (17, 32): 1250, (17, 34): 1322, (17, 36): 1394, (17, 38): 1466, (18, 0): 105, (18, 2): 180, (18, 4): 256, (18, 6): 332, (18, 8): 408, (18, 10): 484, (18, 12): 560, (18, 14): 636,
          (18, 16): 712, (18, 18): 788, (18, 20): 864, (18, 22): 940, (18, 24): 1016, (18, 26): 1092, (18, 28): 1168, (18, 30): 1244, (18, 32): 1320, (18, 34): 1396, (18, 36): 1472, (18, 38): 1548,
          (19, 0): 111, (19, 2): 190, (19, 4): 270, (19, 6): 350, (19, 8): 430, (19, 10): 510, (19, 12): 590, (19, 14): 670, (19, 16): 750, (19, 18): 830, (19, 20): 910, (19, 22): 990, (19, 24): 1070,
          (19, 26): 1150, (19, 28): 1230, (19, 30): 1310, (19, 32): 1390, (19, 34): 1470, (19, 36): 1550, (19, 38): 1630}
    z3 = {(0, 0): 1, (0, 2): 2, (0, 4): 4, (0, 6): 7, (0, 8): 10, (0, 10): 11, (0, 12): 14, (0, 14): 17, (0, 16): 19, (0, 18): 21, (0, 20): 25, (0, 22): 27, (0, 24): 30, (0, 26): 31, (0, 28): 34,
          (0, 30): 37, (0, 32): 38, (0, 34): 42, (0, 36): 45, (0, 38): 47, (1, 0): 3, (1, 2): 6, (1, 4): 11, (1, 6): 15, (1, 8): 18, (1, 10): 24, (1, 12): 28, (1, 14): 32, (1, 16): 36, (1, 18): 39,
          (1, 20): 42, (1, 22): 48, (1, 24): 55, (1, 26): 54, (1, 28): 56, (1, 30): 66, (1, 32): 70, (1, 34): 68, (1, 36): 73, (1, 38): 79, (2, 0): 5, (2, 2): 13, (2, 4): 18, (2, 6): 23, (2, 8): 30,
          (2, 10): 38, (2, 12): 42, (2, 14): 49, (2, 16): 55, (2, 18): 62, (2, 20): 66, (2, 22): 68, (2, 24): 71, (2, 26): 82, (2, 28): 88, (2, 30): 90, (2, 32): 93, (2, 34): 102, (2, 36): 107,
          (2, 38): 112, (3, 0): 10, (3, 2): 19, (3, 4): 25, (3, 6): 34, (3, 8): 42, (3, 10): 51, (3, 12): 59, (3, 14): 66, (3, 16): 66, (3, 18): 74, (3, 20): 85, (3, 22): 98, (3, 24): 97,
          (3, 26): 104, (3, 28): 108, (3, 30): 128, (3, 32): 138, (3, 34): 144, (3, 36): 134, (3, 38): 147, (4, 0): 13, (4, 2): 22, (4, 4): 31, (4, 6): 44, (4, 8): 52, (4, 10): 63, (4, 12): 69,
          (4, 14): 76, (4, 16): 85, (4, 18): 101, (4, 20): 109, (4, 22): 110, (4, 24): 132, (4, 26): 132, (4, 28): 145, (4, 30): 150, (4, 32): 155, (4, 34): 167, (4, 36): 176, (4, 38): 172,
          (5, 0): 17, (5, 2): 28, (5, 4): 42, (5, 6): 50, (5, 8): 60, (5, 10): 69, (5, 12): 80, (5, 14): 90, (5, 16): 103, (5, 18): 106, (5, 20): 133, (5, 22): 146, (5, 24): 156, (5, 26): 166,
          (5, 28): 176, (5, 30): 185, (5, 32): 189, (5, 34): 200, (5, 36): 205, (5, 38): 230, (6, 0): 22, (6, 2): 35, (6, 4): 46, (6, 6): 57, (6, 8): 71, (6, 10): 83, (6, 12): 101, (6, 14): 106,
          (6, 16): 128, (6, 18): 131, (6, 20): 136, (6, 22): 148, (6, 24): 182, (6, 26): 188, (6, 28): 189, (6, 30): 201, (6, 32): 230, (6, 34): 231, (6, 36): 256, (6, 38): 254, (7, 0): 27,
          (7, 2): 40, (7, 4): 54, (7, 6): 67, (7, 8): 83, (7, 10): 93, (7, 12): 111, (7, 14): 123, (7, 16): 138, (7, 18): 147, (7, 20): 162, (7, 22): 174, (7, 24): 197, (7, 26): 214, (7, 28): 232,
          (7, 30): 226, (7, 32): 269, (7, 34): 273, (7, 36): 290, (7, 38): 278, (8, 0): 32, (8, 2): 45, (8, 4): 62, (8, 6): 77, (8, 8): 91, (8, 10): 109, (8, 12): 134, (8, 14): 140, (8, 16): 147,
          (8, 18): 161, (8, 20): 184, (8, 22): 198, (8, 24): 230, (8, 26): 249, (8, 28): 240, (8, 30): 262, (8, 32): 301, (8, 34): 280, (8, 36): 287, (8, 38): 321, (9, 0): 38, (9, 2): 50, (9, 4): 68,
          (9, 6): 86, (9, 8): 109, (9, 10): 127, (9, 12): 138, (9, 14): 158, (9, 16): 186, (9, 18): 198, (9, 20): 217, (9, 22): 235, (9, 24): 240, (9, 26): 273, (9, 28): 288, (9, 30): 281,
          (9, 32): 319, (9, 34): 355, (9, 36): 320, (9, 38): 359, (10, 0): 42, (10, 2): 59, (10, 4): 80, (10, 6): 105, (10, 8): 119, (10, 10): 141, (10, 12): 155, (10, 14): 169, (10, 16): 201,
          (10, 18): 211, (10, 20): 244, (10, 22): 267, (10, 24): 256, (10, 26): 275, (10, 28): 326, (10, 30): 315, (10, 32): 332, (10, 34): 387, (10, 36): 391, (10, 38): 382, (11, 0): 47, (11, 2): 63,
          (11, 4): 87, (11, 6): 116, (11, 8): 136, (11, 10): 145, (11, 12): 162, (11, 14): 181, (11, 16): 199, (11, 18): 221, (11, 20): 236, (11, 22): 295, (11, 24): 294, (11, 26): 332, (11, 28): 352,
          (11, 30): 342, (11, 32): 396, (11, 34): 426, (11, 36): 449, (11, 38): 461, (12, 0): 51, (12, 2): 72, (12, 4): 100, (12, 6): 118, (12, 8): 138, (12, 10): 165, (12, 12): 176, (12, 14): 208,
          (12, 16): 220, (12, 18): 271, (12, 20): 266, (12, 22): 315, (12, 24): 336, (12, 26): 351, (12, 28): 360, (12, 30): 356, (12, 32): 376, (12, 34): 448, (12, 36): 476, (12, 38): 513,
          (13, 0): 57, (13, 2): 73, (13, 4): 101, (13, 6): 131, (13, 8): 156, (13, 10): 178, (13, 12): 213, (13, 14): 232, (13, 16): 245, (13, 18): 254, (13, 20): 297, (13, 22): 339, (13, 24): 347,
          (13, 26): 390, (13, 28): 412, (13, 30): 449, (13, 32): 408, (13, 34): 458, (13, 36): 506, (13, 38): 528, (14, 0): 62, (14, 2): 81, (14, 4): 117, (14, 6): 135, (14, 8): 167, (14, 10): 204,
          (14, 12): 227, (14, 14): 257, (14, 16): 250, (14, 18): 308, (14, 20): 323, (14, 22): 322, (14, 24): 350, (14, 26): 371, (14, 28): 424, (14, 30): 432, (14, 32): 455, (14, 34): 516,
          (14, 36): 559, (14, 38): 534, (15, 0): 65, (15, 2): 88, (15, 4): 115, (15, 6): 142, (15, 8): 181, (15, 10): 215, (15, 12): 231, (15, 14): 262, (15, 16): 294, (15, 18): 305, (15, 20): 362,
          (15, 22): 394, (15, 24): 408, (15, 26): 417, (15, 28): 424, (15, 30): 492, (15, 32): 541, (15, 34): 569, (15, 36): 528, (15, 38): 537, (16, 0): 69, (16, 2): 99, (16, 4): 134, (16, 6): 162,
          (16, 8): 189, (16, 10): 220, (16, 12): 244, (16, 14): 272, (16, 16): 309, (16, 18): 312, (16, 20): 338, (16, 22): 373, (16, 24): 435, (16, 26): 451, (16, 28): 452, (16, 30): 484,
          (16, 32): 507, (16, 34): 564, (16, 36): 617, (16, 38): 614, (17, 0): 76, (17, 2): 104, (17, 4): 144, (17, 6): 163, (17, 8): 208, (17, 10): 234, (17, 12): 256, (17, 14): 292, (17, 16): 330,
          (17, 18): 352, (17, 20): 365, (17, 22): 398, (17, 24): 464, (17, 26): 476, (17, 28): 473, (17, 30): 513, (17, 32): 561, (17, 34): 560, (17, 36): 607, (17, 38): 633, (18, 0): 81,
          (18, 2): 105, (18, 4): 151, (18, 6): 179, (18, 8): 220, (18, 10): 238, (18, 12): 287, (18, 14): 290, (18, 16): 340, (18, 18): 376, (18, 20): 416, (18, 22): 415, (18, 24): 435, (18, 26): 496,
          (18, 28): 499, (18, 30): 544, (18, 32): 571, (18, 34): 651, (18, 36): 607, (18, 38): 724, (19, 0): 85, (19, 2): 114, (19, 4): 147, (19, 6): 194, (19, 8): 230, (19, 10): 272, (19, 12): 309,
          (19, 14): 333, (19, 16): 351, (19, 18): 375, (19, 20): 440, (19, 22): 445, (19, 24): 474, (19, 26): 510, (19, 28): 591, (19, 30): 553, (19, 32): 655, (19, 34): 665, (19, 36): 662,
          (19, 38): 773}
    
    ax = plt.subplot(1, 1, 1, projection='3d')
    x = list(set(x))
    y = list(set(y))
    X = np.array(x)
    Y = np.array(y)
    X, Y = np.meshgrid(X, Y)
    Z1 = []
    Z2 = []
    Z3 = []
    for iy in y:
        ll1 = []
        ll2 = []
        ll3 = []
        for ix in x:
            ll1.append(z1[(ix, iy)])
            ll2.append(z2[(ix, iy)])
            ll3.append(z3[(ix, iy)])
        Z1.append(ll1)
        Z2.append(ll2)
        Z3.append(ll3)
    Z1 = np.array(Z1)
    Z2 = np.array(Z2)
    Z3 = np.array(Z3)
    ax.plot_surface(X, Y, Z1, rstride=1, label='sd', cstride=1, cmap='Reds_r')
    ax.plot_surface(X, Y, Z2, rstride=1, label='sd', cstride=1, cmap='Blues_r')
    ax.plot_surface(X, Y, Z3, rstride=1, label='sd', cstride=1, cmap='Greens_r')
    plt.xlabel('随从个数', labelpad=35, rotation=-8)
    plt.ylabel('商人个数减去随从个数', labelpad=35)
    plt.title("探索次数与不同启发式函数的关系图", pad=30)
    plt.show()


if __name__ == '__main__':
    LEGEND_FONT_SIZE = 22
    GENERAL_FONT_SIZE = 26
    plt.rcParams.update({
        # 'figure.dpi': 200,  # 300 => 1800*1200, 200 => 1200*800
        # 'savefig.dpi': 200,  # 300 => 1800*1200, 200 => 1200*800
        'figure.figsize': (16*1.1, 9*1.1),
        'font.size': LEGEND_FONT_SIZE,              # legend title
        'legend.fontsize': LEGEND_FONT_SIZE,        # legend label
        'axes.titlesize': GENERAL_FONT_SIZE,        # fig title
        'axes.labelsize': GENERAL_FONT_SIZE + 2,        # axes label
        'xtick.labelsize': GENERAL_FONT_SIZE,       # xtick label
        'ytick.labelsize': GENERAL_FONT_SIZE,       # ytick label
        # 'figure.titlesize': GENERAL_FONT_SIZE,    # unknown
    })
    # main()
    paint_segments(False)
    # plot_aws_acc_curves()
    # plot_mm()
    # plot_3d()

"""
's' : 方块状
'o' : 实心圆
'^' : 正三角形
'v' : 反正三角形
'+' : 加号
'*' : 星号
'x' : x号
'p' : 五角星
'1' : 三脚架标记
'2' : 三脚架标记
'$❤$' : 爱心
"""
